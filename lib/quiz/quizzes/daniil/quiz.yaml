theme: "System design"
level: 3
questions:
  - question: "Что повышает master-master репликация?"
    picture: ""
    options: ["запись", "чтение", "и чтение и запись", "ничего"]
    correct_option_id: 3
    explanation: "повышает отказоустойчивость. но ничего не ускоряет"
    open_period: 20
  
  - question: "Какой тип индексов не сработает с запросами содержащими конструкцию LIKE, неравенства и сортировку?"
    picture: ""
    options: ["B-TREE", "GIST", "GIN", "HASH"]
    correct_option_id: 3
    explanation: "hash классно работает со сравнениями"
    open_period: 20

  - question: "Алгоритм распределенных систем, обеспечивающий консистентность данных в системе с помощью выбора одного лидера на весь кластер, который обеспечивает запись?"
    picture: ""
    options: ["service mash", "raft", "control plane", "data plane"]
    correct_option_id: 1
    explanation: "Как следствие, записи между собой не перемешиваются, и не возникает ситуаций, когда информация в разных нодах различается"
    open_period: 25

  - question: "Какая проблема существует у приложения, которое выдерживает нагрузку только используя кэширование?"
    picture: ""
    options: ["большая нагрузка на кэш", "медленная запись в кэш", "холодный старт", "упирается в оперативку"]
    correct_option_id: 2
    explanation: "Данных еще нет в кэше, его необходимо прогревать. Неверно прогретый кэш - тоже проблема как и его отсутствие"
    open_period: 25

  - question: "Какой вид репликации бд спасает от падения основной ноды?"
    picture: ""
    options: ["master-slave", "master-master", "любая"]
    correct_option_id: 1
    explanation: "важно помнить, что мы не ускоряем чтение, а в некоторых случаях даже замедляем запись. Также есть риск потерять данные если мастер упал до записи на другой мастер"
    open_period: 20
  
  - question: "механизм отправки сообщений по email принято реализовывать используя?"
    picture: ""
    options: ["топики kafka", "БД", "очередь", "выделять отдельный поток в коде"]
    correct_option_id: 2
    explanation: "конечно же асинхронный вариант предпочтителен) Ставим задачу в очередь и даем агенту самому решить когда прийти за отправкой, чтобы не блокировать запрос."
    open_period: 20

  - question: "сколько времени в год простаивает сервис, заявляющий доступность 999 (три девятки)?"
    picture: ""
    options: ["3 дня в год", "1 день в год", "1 час в год", "8 часов в год", "5 минут в год"]
    correct_option_id: 3
    explanation: "почитай емае: https://shootnick.ru/uptime/99.9"
    open_period: 20

  - question: "вашему сервису плохо, а агент, разгребающий очередь продолжает работать как и работал. Он продолжает слать запросы в ваш сервер. Что может произойти в таком случае?"
    picture: ""
    options: ["сервис упадет из-за большого количества коннектов", "retry storm", "сервис перезапустится и очередь разгребется"]
    correct_option_id: 1
    explanation: "и правда, ретраи могут сделать вашему сервису еще хуже, когда он отдает 500ки. Он продолжит их отдавать."
    open_period: 25

  - question: "ваш сервис все таки упал после шквала ретраев, но вы его героически переподняли. Что будет происходить?"
    picture: ""
    options: ["опять упадет", "очередь разгребется", "сервис не стартанет"]
    correct_option_id: 0
    explanation: "Если запросов мало, то очередь разгребется. Но вообще зависит от ситуации. Время восстановления после устранения триггера зависит от объёма запросов, обрушившихся на сервер. Поэтому важно уменьшать нагрузку на сервер для ускорения восстановления. А ретраи, наоборот, только увеличивают нагрузку."
    open_period: 25

  - question: "Идея паттерна circuit breaker (cb) в том, что клиент вообще перестаёт ходить в сервис, если?"
    picture: ""
    options: ["использовать exponential backoff", "использовать jitter", "процент ошибок сервиса выше порога"]
    correct_option_id: 2
    explanation: ""
    open_period: 20

  - question: "сколько времени в год простаивает сервис, заявляющий доступность 99999 (пять девяток)?"
    picture: ""
    options: ["30 минут в год", "1 день в год", "1 час в год", "8 часов в год", "5 минут в год"]
    correct_option_id: 4
    explanation: ""
    open_period: 20

  - question: "Идея паттерна deadline propagation в том, что клиент в запросе к серверу передаёт?"
    picture: ""
    options: ["значение таймаута", "количество байт для обработки", "количество процессов заблокированных на выполнении таски"]
    correct_option_id: 0
    explanation: "Сервер в процессе обработки запроса регулярно проверяет: не истёк ли тайм-аут на клиенте. Если истёк, то можно завершать обработку запроса ошибкой"
    open_period: 25

  - question: "поверх какого протокола работает gRPC?"
    picture: ""
    options: ["UDP", "HTTP/2", "SMTP"]
    correct_option_id: 1
    explanation: "базаааа"
    open_period: 15

  - question: "умеет ли браузер работать с GRPC?"
    picture: ""
    options: ["да, он же работает поверх HTTP/2", "да, но запросы специфичны как и у websocket'ов", "нет"]
    correct_option_id: 2
    explanation: "не умеет. Нужно писать умную проксю, и маппить запросы из http в grpc и обратно"
    open_period: 15

  - question: "разделение бд на несколько независимых частей - это?"
    picture: ""
    options: ["партиционирование", "шардирование", "репликация", "масштабирование"]
    correct_option_id: 1
    explanation: ""
    open_period: 25

  - question: "выделенные экземпляры базы данных являются не составными частями общего хранилища, а копиями друг друга - это?"
    picture: ""
    options: ["партиционирование", "шардирование", "репликация", "масштабирование"]
    correct_option_id: 2
    explanation: ""
    open_period: 25

  - question: "Разделение данных внутри одной бд, между несколькими таблицами - это?"
    picture: ""
    options: ["партиционирование", "дублирование", "репликация", "масштабирование"]
    correct_option_id: 0
    explanation: ""
    open_period: 25

  - question: "Приложение стало сильно нагружать один из шардов базы данных. В чем может быть дело?"
    picture: ""
    options: ["неверный ключ/функция шардирования", "долгие операции на чтение/запись в тормозящем шарде", "коллизии в данных", "переиндексирование данных при вставке"]
    correct_option_id: 0
    explanation: "неверный ключ шардирования данных и/или данные распределяются неравномерно по шардам + возможно какие-то записи чаще используют, чем другие. (Да, придется перешардировать. Дорого...., но что поделать)"
    open_period: 25

  - question: "В БД настроена репликация. Что отправляется при запросе к бд с мастера на другие хосты?"
    picture: ""
    options: ["запрос с текстом sql-запроса", "сами данные", "лог", "байтовое представление запроса"]
    correct_option_id: 2
    explanation: "запрос восстанавливается из так называемого val-лога, данные и запрос с текстом sql не передаются"
    open_period: 25

  - question: "Потребление какого ресурса в системе больше всего зависит от времени дня?"
    picture: ""
    options: ["Трафик", "CPU", "RAM"]
    correct_option_id: 0
    explanation: "да, трафик. Люди простые существа живущие по биологическому ритму. Вечером под 7 часов пик трафика, ночью в 4 часа утра минимум."
    open_period: 20

  - question: "У нас тормозит запись в базу. Какой из подходов репликации нам подойдет для решения проблемы?"
    picture: ""
    options: ["синхронная", "асинхронная", "полусинхронная"]
    correct_option_id: 1
    explanation: "sync - медленно. Чтобы дождаться коммита на мастере надо закоммитить на 50% + 1 хостах слейвах. При асинке можно не ждать."
    open_period: 25

  - question: "что будет если поломать таблицу маршрутизации на хосте?"
    picture: ""
    options: ["тачка перезапустится", "внутренний планировщик ОСи введет ее в recovery mode", "отвалятся доступы, тачка поломается и перестанет быть доступной", "по ssh не зайти, но приложением, которое там крутится, можно будет пользоваться"]
    correct_option_id: 2
    explanation: "До перезагрузки пода ничего не будет доступно. Поломанная таблица маршрутизации поломает все доступы, оч опасная штука."
    open_period: 25

  - question: "Может ли график потребления трафика пользователями что-то сказать о быстроте работы приложения?"
    picture: ""
    options: ["да", "нет"]
    correct_option_id: 1
    explanation: "Нет, для данной метрики следует использовать тайминги ответов, опираясь на перцентили, чтобы исключать и исследовать долгие и аномальные ответы сервера."
    open_period: 20
  
  - question: "Метод балансировки нагрузки при котором балансировщик в цикле распределяет нагрузку, не учитывая метаинформацию о загруженности хоста?"
    picture: ""
    options: ["Sticky Sessions", "Round Robin", "Least Connections"]
    correct_option_id: 1
    explanation: "Предположим, что у вас есть три сервера и между ними нужно равномерно распределить все запросы. Round Robin будет направлять запросы по очереди: сначала первому серверу, потом второму, а затем третьему. После этого он будет повторять этот цикл из раза в раз."
    open_period: 25

  - question: "что делает покрывающий индекс в БД?"
    picture: ""
    options: ["использует несколько основых колонок таблицы", "хранит взвешенную информацию о покрытии табличных данных индексом", "позволяет получить данные с листьев индекса без обращений к записям самой таблицы", "хранит реальные строки данных в листьях индекса"]
    correct_option_id: 2
    explanation: "получаем ответ из индекса + экономим ресурсы и не тратим их на походы в саму базку"
    open_period: 30

  - question: "какую проблему помогает решить инвалидация кэша?"
    picture: ""
    options: ["неконсистентность данных", "кэширование невалидных данных", "стабилизация работы при пиковых нагрузках", "прогрев кэша при старте приложения"]
    correct_option_id: 2
    explanation: "инвалидация помогает: система сдеградировала при ответе и отдала нам неполный ответ, а мы положили его в кэш; в систему по ошибке пролили некорректные данные, их быстро поправили в основном хранилище, но мы уже положили их в кэш; система выкатила багованный релиз, в котором стала отдавать невалидные данные. Релиз быстро откатили, но они уже пролились к нам в кэш;"
    open_period: 25

  - question: "почему единая точка входа (оркестратор) для нескольких сервисов - это плохо?"
    picture: ""
    options: ["тяжело сделать трассировку запросов", "большая нагрузка на базу данных", "единая точка отказа"]
    correct_option_id: 2
    explanation: "вместо микросервисов мы получили распределенную версию монолита, упала входная точка - упало все приложение. Особенно плохо если сервисы statefull и зависят от других."
    open_period: 25

  - question: "с помощью какого инструмента с легкостью можно определить что пошло не так с конкретным запросом в микросервисной архитектуре?"
    picture: ""
    options: ["логирование", "алерты", "дашборды и графики", "трассировка"]
    correct_option_id: 3
    explanation: "Первым делом смотрят на трассировку запросов. С помощью нее можно понять в каком сервисе упал запрос. Затем идут смотреть в логи, чтобы понять что случилось конкретно. А дашборды и алерты - о другом, они сигнализируют что с системой что-то не так, а не с конкретным запросом."
    open_period: 25

  - question: "что прокидывает балансировщик в запросе, который пришел от пользователя/другого сервиса, чтобы включить трассировку?"
    picture: ""
    options: ["идентификатор сервиса/пользователя", "уникальный айдишник запроса", "ничего, запросы сами склеиваются"]
    correct_option_id: 1
    explanation: "по уникальному request_id можно искать запросы в специальной системе и анализировать их."
    open_period: 25

  - question: "сжатие ответов в http/grpc (да в любых серверах) позволяет сократить?"
    picture: ""
    options: ["потребление CPU", "потребление RAM", "потребление трафика пользователем", "использование дискового пространства"]
    correct_option_id: 2
    explanation: "ну конечно же трафик"
    open_period: 25

  - question: "уровень сжатия ответов в http/grpc (да в любых серверах) нагружает?"
    picture: ""
    options: ["CPU", "RAM", "диск", "сеть"]
    correct_option_id: 0
    explanation: "для сжатия используются мощности процессора. Высокий уровень сжатия позволяет отдавать ответы меньшего размера, но при этом сильно тратит ресурсы CPU."
    open_period: 20



